/** @file cmdline_dpis.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_TPSYTRID_H
#define CMDLINE_TPSYTRID_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "dpis"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "dpis"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "v1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info_dpis
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int size_arg;	/**< @brief Size of problem.  */
  char * size_orig;	/**< @brief Size of problem original value given at command line.  */
  const char *size_help; /**< @brief Size of problem help description.  */
  int toeplitz_random_flag;	/**< @brief Use random data (default=on).  */
  const char *toeplitz_random_help; /**< @brief Use random data help description.  */
  double diagonal_arg;	/**< @brief Diagonal of the Toeplitz matrix.  */
  char * diagonal_orig;	/**< @brief Diagonal of the Toeplitz matrix original value given at command line.  */
  const char *diagonal_help; /**< @brief Diagonal of the Toeplitz matrix help description.  */
  double off_diagonal_arg;	/**< @brief Sub- and super- diagonals of the Toeplitz matrix.  */
  char * off_diagonal_orig;	/**< @brief Sub- and super- diagonals of the Toeplitz matrix original value given at command line.  */
  const char *off_diagonal_help; /**< @brief Sub- and super- diagonals of the Toeplitz matrix help description.  */
  char * rhs_file_arg;	/**< @brief File containing rhs vector values (set to '-' to use standard input).  */
  char * rhs_file_orig;	/**< @brief File containing rhs vector values (set to '-' to use standard input) original value given at command line.  */
  const char *rhs_file_help; /**< @brief File containing rhs vector values (set to '-' to use standard input) help description.  */
  int rhs_random_flag;	/**< @brief Use random data of specified size as rhs vector (default=on).  */
  const char *rhs_random_help; /**< @brief Use random data of specified size as rhs vector help description.  */
  char * rhs_save_random_arg;	/**< @brief File where random rhs data should be saved.  */
  char * rhs_save_random_orig;	/**< @brief File where random rhs data should be saved original value given at command line.  */
  const char *rhs_save_random_help; /**< @brief File where random rhs data should be saved help description.  */
  int random_seed_arg;	/**< @brief Seed used to initialize random number generator (allows repeatable tests).  */
  char * random_seed_orig;	/**< @brief Seed used to initialize random number generator (allows repeatable tests) original value given at command line.  */
  const char *random_seed_help; /**< @brief Seed used to initialize random number generator (allows repeatable tests) help description.  */
  int rojo_flag;	/**< @brief Use the Modified Rojo Method (default=on).  */
  const char *rojo_help; /**< @brief Use the Modified Rojo Method help description.  */
  int dst_flag;	/**< @brief Use the DST Method (default=off).  */
  const char *dst_help; /**< @brief Use the DST Method help description.  */
  int ldlt_flag;	/**< @brief Use the LDLt Method (default=off).  */
  const char *ldlt_help; /**< @brief Use the LDLt Method help description.  */
  int time_flag;	/**< @brief Show time spent in system resolution (default=on).  */
  const char *time_help; /**< @brief Show time spent in system resolution help description.  */
  int show_results_flag;	/**< @brief Print system solution vector to standard output (default=off).  */
  const char *show_results_help; /**< @brief Print system solution vector to standard output help description.  */
  int raw_results_flag;	/**< @brief Generates raw results for statistical graphics (default=off).  */
  const char *raw_results_help; /**< @brief Generates raw results for statistical graphics help description.  */
  int raw_headers_flag;	/**< @brief Prints commented header (column info) for raw results (default=off).  */
  const char *raw_headers_help; /**< @brief Prints commented header (column info) for raw results help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int size_given ;	/**< @brief Whether size was given.  */
  unsigned int toeplitz_random_given ;	/**< @brief Whether toeplitz-random was given.  */
  unsigned int diagonal_given ;	/**< @brief Whether diagonal was given.  */
  unsigned int off_diagonal_given ;	/**< @brief Whether off-diagonal was given.  */
  unsigned int rhs_file_given ;	/**< @brief Whether rhs-file was given.  */
  unsigned int rhs_random_given ;	/**< @brief Whether rhs-random was given.  */
  unsigned int rhs_save_random_given ;	/**< @brief Whether rhs-save-random was given.  */
  unsigned int random_seed_given ;	/**< @brief Whether random-seed was given.  */
  unsigned int rojo_given ;	/**< @brief Whether rojo was given.  */
  unsigned int dst_given ;	/**< @brief Whether dst was given.  */
  unsigned int ldlt_given ;	/**< @brief Whether ldlt was given.  */
  unsigned int time_given ;	/**< @brief Whether time was given.  */
  unsigned int show_results_given ;	/**< @brief Whether show-results was given.  */
  unsigned int raw_results_given ;	/**< @brief Whether raw-results was given.  */
  unsigned int raw_headers_given ;	/**< @brief Whether raw-headers was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info_dpis (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info_dpis (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_dpis_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_dpis_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_dpis_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info_dpis *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info_dpis *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info_dpis *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info_dpis *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info_dpis *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info_dpis structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info_dpis *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info_dpis structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info_dpis *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info_dpis *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_TPSYTRID_H */
