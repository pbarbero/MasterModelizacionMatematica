\documentclass[fleqn, letter, 10pt]{article}
%\usepackage[round,longnamesfirst]{natbib}
\usepackage[left=2cm,top=2cm,right=2cm,nohead,nofoot]{geometry} 
\usepackage{graphicx,keyval,thumbpdf,url}
\usepackage{hyperref}
\usepackage{Sweave}
\SweaveOpts{strip.white=true, eps=false}
\AtBeginDocument{\setkeys{Gin}{width=0.6\textwidth}}

\setlength{\parindent}{0mm}
\setlength{\parskip}{3mm plus2mm minus2mm}

\usepackage[utf8]{inputenc}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\usepackage{amsmath}
\usepackage{amsfonts}


\newcommand{\strong}[1]{{\normalfont\fontseries{b}\selectfont #1}}
\newcommand{\class}[1]{\mbox{\textsf{#1}}}
\newcommand{\func}[1]{\mbox{\texttt{#1()}}}
\newcommand{\code}[1]{\mbox{\texttt{#1}}}
\newcommand{\pkg}[1]{\strong{#1}}
\newcommand{\samp}[1]{`\mbox{\texttt{#1}}'}
\newcommand{\proglang}[1]{\textsf{#1}}
\newcommand{\set}[1]{\mathcal{#1}}
\newcommand{\sQuote}[1]{`{#1}'}
\newcommand{\dQuote}[1]{``{#1}''}
\newcommand\R{{\mathbb{R}}}

\DeclareMathOperator*{\argmin}{argmin}
\DeclareMathOperator*{\argmax}{argmax}



\begin{document}
\SweaveOpts{concordance=TRUE}

\title{R Introductory Session}
\author{J.T. Alcal?}
\date{February 7, 2015}
\maketitle
\tableofcontents
\sloppy


%\abstract{Abstract goes here}



<<echo=FALSE>>=
options(width = 70, prompt="R> ")
### for sampling
set.seed(1234)
@

\section{Introduction}

R is a free software environment for statistical computing and graphics.

\url{http://www.r-project.org/}

Manuals and extension packages can be obtained from CRAN at

\url{http://cran.r-project.org/}

\subsection{Getting Help}

Read ``An Introduction to R'' from the CRAN manuals section.

In R online documentation is available with $?$, $??$, $help()$, etc.

For a description of packages that could be interesting for a particular 
task  (e.g., machine learning) 
go to the ``Task Views'' subsection on the CRAN web site.

\section{Basic Data Types}
\subsection{Vector}

<<fig=TRUE>>=
a <- c(1,3,5:10)
a

length(a)

a[1]
a[-2]
a[1:3]

mean(a)
summary(a)

a <- a-1
a

names(a) <- 1:length(a)
a

plot(a)
@


\subsection{Matrix}

<<>>=
m <- matrix(1:25, ncol=5, byrow=FALSE)
dim(m)

colnames(m) <- paste("col", 1:ncol(m))
rownames(m) <- paste("row", 1:nrow(m))

m[1,1:3]
m[1,]

m
t(m)
m*m
m%*%m

colSums(m)

diag(m)
@


<<fig=TRUE>>=
image(m)
@

3D plot
<<fig=TRUE>>=
persp(m, shade=0.1, theta=30)
@

\subsection{List}
<<>>=

l <- list(a=1:5, b=c("hello", "world"), c=matrix(1:10, ncol=2))
l
l[[2]]
l$b
l[["b"]]

str(l)

rev(l)

lapply(l, rev)
@

Data.frames are special lists where each element has the same length
<<>>=
df <- data.frame(number=1:3, letter=c("A","B","C"))
df

df$letter
@

Typically input data is stored as a data.frame.

\subsection{Coercion Between Data Types}

<<>>=
m
class(m)

m_df <- as.data.frame(m)
m_df
class(m_df)

as.vector(m)
as.character(m)
as.logical(m)
@

\section{Reading/Writing Data and Saving Plots}
\subsection{Reading/Writing Data}

try \verb|? read.table| and \verb|? write.table|

<<>>=
write.csv(m, file="matrix.csv")
m2 <- read.csv("matrix.csv")

m2
@

\subsection{Creating Plots for Documents}

Create a pdf file
<<fig=FALSE>>=
data_rand <- cbind(x=rnorm(100), y=rnorm(100))

pdf(file="myplot.pdf")
plot(data_rand, xlim=c(-4,4), ylim=c(-4,4))
dev.off()
@

Create a png file
<<fig=FALSE>>=
png(file="myplot.png")
plot(data_rand, xlim=c(-4,4), ylim=c(-4,4))
dev.off()
@

\section{Programming Elements}

\subsection{Control Structures}

<<>>=
a <- c()
for(i in 1:10) {a <- append(a, 100+i)}
a
@

Better
<<>>=
a <- numeric(10)
for(i in 1:10) {a[i] <- 100+i}
a
@

while and if work as expected (see \verb|?Control|)

Comparisons and logical vectors
<<>>=
a>103
which(a>103)
@

<<>>=
a[a>103] <- NA
a
@

Try to prevent loops. Most things in R are vectorized. For example
to add all numbers in a vector which are divisible by 3 together.

<<>>=
v <- as.integer(runif(10000,1,100))
@

Don't use a loop like this
<<>>=
s <- 0
system.time(
for (i in 1:length(v)) {
    if(v[i]%%3==0) s <- s+v[i]
    }
    )
@


But do this
<<>>=
system.time(s <- sum(v[v%%3==0]))
@


\subsection{Functions}

Defining a function
<<>>=
dec <- function(x) { 
    x-1 
}

dec

dec(1:10)
@

A function returning a function

<<>>=
gen_dec <- function(i) { function(x) {x-i} }

my_dec <- gen_dec(5)
my_dec(1:10)
@

\subsection{Object orientation}

R supports two ways of implementing oo called S3 and S4. In S3 a generic
functions can have implementations for different objects and be dispatched
depending on the object they operate on (typically the first argument).  

The name convention for methods is\\
\verb|<function name>.<object type>|

For example see plot. Type \verb|plot.| and hit tab twice. Then type e.g. 
\verb|? plot.default|.

Defining and using a class
<<>>=
v <- 1:5
v
class(v)

class(v) <- "myclass"
v

attributes(v)


print.myclass <- function(x) {cat("My class: ", unclass(x), "\n")}
v
@

S4 provides oo-support with formal class descriptions.

\section{Applications}

\subsection{Inspecting Data}


This famous (Fisher's or Anderson's) iris data set gives the
measurements in centimeters of the variables sepal length and
width and petal length and width, respectively, for 50 flowers
from each of 3 species of iris.  The species are Iris setosa,
     versicolor, and virginica.

% \begin{center}
% \includegraphics[width=5cm]{iris-flower.jpeg}
% \end{center}


<<fig=TRUE>>=

data(iris)
head(iris)

summary(iris)

data <- iris[, -5]
class <- iris[,5]

boxplot(data)
@

Data can be scaled
<<fig=TRUE>>=
data_s <- scale(data)
boxplot(as.data.frame(data_s))
@


We can look at the data as a trellis plot.
<<fig=TRUE>>=
plot(data, col=class)
@

We can look at a parallel coordinates plot
<<fig=TRUE>>=
library("MASS")
parcoord(data, col=class, pch=0)
@

\subsection{Linear Regression}

We fit a linear model for sepal length based on petals on part of the data 
(train). 

<<>>=
train.ind <- sample(1:nrow(iris), 100)
train <- iris[train.ind,]
test <- iris[-train.ind,]

@

lm uses a formula interface (many model building functions in
R support this kind of interface; see \url{http://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models}).

<<fig=TRUE>>=
model <- lm(Sepal.Length ~ Petal.Length + Petal.Width, data = train)
model

plot(model, which=1)
@

Use the linear model to predict sepal length in the test data.

<<fig=TRUE>>=
Sepal.Length.predicted <- predict(model, test)
plot(Sepal.Length.predicted, test$Sepal.Length)
abline(0,1, col="red")
@

\subsection{Cluster Analysis}


Clustering with $k$-means.
<<>>=
cl <- kmeans(data, centers=3)
cl

table(class, cl$cluster)
@

Use PCA for display

<<fig=TRUE>>=
pc <- prcomp(data)
pc
summary(pc)

plot(pc$x, col=class, pch=cl$cluster)
@

\subsection{Hierarchical Clustering}

<<fig=TRUE>>=
d <- dist(data)
str(d)

hc <- hclust(d)
hc

plot(hc)
@

<<>>=
d <- dist(data)
labels <- cutree(hc,3)

table(class,labels)
@

\subsection{Classification}

Here we use the package ``caret'' so we have to install it by typing
\verb|install.packages("caret", depend = TRUE)|.

We use 90\% as the training set and 10\% as the test set.
<<>>=
train_index <- sample(1:nrow(data), .9*nrow(data), replace = FALSE)
train_data <- data[train_index,]
train_class <- class[train_index]
test_data <- data[-train_index,]
test_class <- class[-train_index]


library("caret")
knn <- knn3(as.matrix(train_data), train_class, k = 5)
knn
class(knn)
@

Now we can use the model to make predictions for our test set (most model
types in R have a predict method).

<<>>=
pred <- predict(knn, test_data, type="class")

conf_tab <- table(test_class, pred)
conf_tab

sum(diag(conf_tab))/sum(conf_tab)
@

Since knn is of class knn3 use
\verb|? predict.knn3| to get help for predict for class knn3.

Caret supports also a formula interface 
Let's use caret to search for parameters and do 10-fold cross validation.

<<>>=
knn_opt <- train(Species~., data=iris, method="knn", 
    trControl= trainControl(method="cv"),
    tuneLength=5)
knn_opt
@

Only use Petal.Length and Sepal.Length for classification
<<>>=
knn_opt <- train(Species~Petal.Length+Sepal.Length, data=iris, method="knn", 
    trControl= trainControl(method="cv"),
    tuneLength=5)
knn_opt
@

For more models try \verb|? train|



\section{Contact Information}

For questions contact me in my office or per email 
at \url{jtalcala@unizar.es}


%
%\bibliographystyle{abbrvnat}
%\bibliography{seriation}
%
\end{document}
