{
    "contents" : "\\documentclass[fleqn, letter, 10pt]{article}\n%\\usepackage[round,longnamesfirst]{natbib}\n\\usepackage[left=2cm,top=2cm,right=2cm,nohead,nofoot]{geometry} \n\\usepackage{graphicx,keyval,thumbpdf,url}\n\\usepackage{hyperref}\n\\usepackage{Sweave}\n\\SweaveOpts{strip.white=true, eps=false}\n\\AtBeginDocument{\\setkeys{Gin}{width=0.6\\textwidth}}\n\n\\setlength{\\parindent}{0mm}\n\\setlength{\\parskip}{3mm plus2mm minus2mm}\n\n\\usepackage[utf8]{inputenc}\n\n%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\\usepackage{amsmath}\n\\usepackage{amsfonts}\n\n\n\\newcommand{\\strong}[1]{{\\normalfont\\fontseries{b}\\selectfont #1}}\n\\newcommand{\\class}[1]{\\mbox{\\textsf{#1}}}\n\\newcommand{\\func}[1]{\\mbox{\\texttt{#1()}}}\n\\newcommand{\\code}[1]{\\mbox{\\texttt{#1}}}\n\\newcommand{\\pkg}[1]{\\strong{#1}}\n\\newcommand{\\samp}[1]{`\\mbox{\\texttt{#1}}'}\n\\newcommand{\\proglang}[1]{\\textsf{#1}}\n\\newcommand{\\set}[1]{\\mathcal{#1}}\n\\newcommand{\\sQuote}[1]{`{#1}'}\n\\newcommand{\\dQuote}[1]{``{#1}''}\n\\newcommand\\R{{\\mathbb{R}}}\n\n\\DeclareMathOperator*{\\argmin}{argmin}\n\\DeclareMathOperator*{\\argmax}{argmax}\n\n\n\n\\begin{document}\n\\SweaveOpts{concordance=TRUE}\n\n\\title{R Introductory Session}\n\\author{J.T. Alcal?}\n\\date{February 7, 2015}\n\\maketitle\n\\tableofcontents\n\\sloppy\n\n\n%\\abstract{Abstract goes here}\n\n\n\n<<echo=FALSE>>=\noptions(width = 70, prompt=\"R> \")\n### for sampling\nset.seed(1234)\n@\n\n\\section{Introduction}\n\nR is a free software environment for statistical computing and graphics.\n\n\\url{http://www.r-project.org/}\n\nManuals and extension packages can be obtained from CRAN at\n\n\\url{http://cran.r-project.org/}\n\n\\subsection{Getting Help}\n\nRead ``An Introduction to R'' from the CRAN manuals section.\n\nIn R online documentation is available with $?$, $??$, $help()$, etc.\n\nFor a description of packages that could be interesting for a particular \ntask  (e.g., machine learning) \ngo to the ``Task Views'' subsection on the CRAN web site.\n\n\\section{Basic Data Types}\n\\subsection{Vector}\n\n<<fig=TRUE>>=\na <- c(1,3,5:10)\na\n\nlength(a)\n\na[1]\na[-2]\na[1:3]\n\nmean(a)\nsummary(a)\n\na <- a-1\na\n\nnames(a) <- 1:length(a)\na\n\nplot(a)\n@\n\n\n\\subsection{Matrix}\n\n<<>>=\nm <- matrix(1:25, ncol=5, byrow=FALSE)\ndim(m)\n\ncolnames(m) <- paste(\"col\", 1:ncol(m))\nrownames(m) <- paste(\"row\", 1:nrow(m))\n\nm[1,1:3]\nm[1,]\n\nm\nt(m)\nm*m\nm%*%m\n\ncolSums(m)\n\ndiag(m)\n@\n\n\n<<fig=TRUE>>=\nimage(m)\n@\n\n3D plot\n<<fig=TRUE>>=\npersp(m, shade=0.1, theta=30)\n@\n\n\\subsection{List}\n<<>>=\n\nl <- list(a=1:5, b=c(\"hello\", \"world\"), c=matrix(1:10, ncol=2))\nl\nl[[2]]\nl$b\nl[[\"b\"]]\n\nstr(l)\n\nrev(l)\n\nlapply(l, rev)\n@\n\nData.frames are special lists where each element has the same length\n<<>>=\ndf <- data.frame(number=1:3, letter=c(\"A\",\"B\",\"C\"))\ndf\n\ndf$letter\n@\n\nTypically input data is stored as a data.frame.\n\n\\subsection{Coercion Between Data Types}\n\n<<>>=\nm\nclass(m)\n\nm_df <- as.data.frame(m)\nm_df\nclass(m_df)\n\nas.vector(m)\nas.character(m)\nas.logical(m)\n@\n\n\\section{Reading/Writing Data and Saving Plots}\n\\subsection{Reading/Writing Data}\n\ntry \\verb|? read.table| and \\verb|? write.table|\n\n<<>>=\nwrite.csv(m, file=\"matrix.csv\")\nm2 <- read.csv(\"matrix.csv\")\n\nm2\n@\n\n\\subsection{Creating Plots for Documents}\n\nCreate a pdf file\n<<fig=FALSE>>=\ndata_rand <- cbind(x=rnorm(100), y=rnorm(100))\n\npdf(file=\"myplot.pdf\")\nplot(data_rand, xlim=c(-4,4), ylim=c(-4,4))\ndev.off()\n@\n\nCreate a png file\n<<fig=FALSE>>=\npng(file=\"myplot.png\")\nplot(data_rand, xlim=c(-4,4), ylim=c(-4,4))\ndev.off()\n@\n\n\\section{Programming Elements}\n\n\\subsection{Control Structures}\n\n<<>>=\na <- c()\nfor(i in 1:10) {a <- append(a, 100+i)}\na\n@\n\nBetter\n<<>>=\na <- numeric(10)\nfor(i in 1:10) {a[i] <- 100+i}\na\n@\n\nwhile and if work as expected (see \\verb|?Control|)\n\nComparisons and logical vectors\n<<>>=\na>103\nwhich(a>103)\n@\n\n<<>>=\na[a>103] <- NA\na\n@\n\nTry to prevent loops. Most things in R are vectorized. For example\nto add all numbers in a vector which are divisible by 3 together.\n\n<<>>=\nv <- as.integer(runif(10000,1,100))\n@\n\nDon't use a loop like this\n<<>>=\ns <- 0\nsystem.time(\nfor (i in 1:length(v)) {\n    if(v[i]%%3==0) s <- s+v[i]\n    }\n    )\n@\n\n\nBut do this\n<<>>=\nsystem.time(s <- sum(v[v%%3==0]))\n@\n\n\n\\subsection{Functions}\n\nDefining a function\n<<>>=\ndec <- function(x) { \n    x-1 \n}\n\ndec\n\ndec(1:10)\n@\n\nA function returning a function\n\n<<>>=\ngen_dec <- function(i) { function(x) {x-i} }\n\nmy_dec <- gen_dec(5)\nmy_dec(1:10)\n@\n\n\\subsection{Object orientation}\n\nR supports two ways of implementing oo called S3 and S4. In S3 a generic\nfunctions can have implementations for different objects and be dispatched\ndepending on the object they operate on (typically the first argument).  \n\nThe name convention for methods is\\\\\n\\verb|<function name>.<object type>|\n\nFor example see plot. Type \\verb|plot.| and hit tab twice. Then type e.g. \n\\verb|? plot.default|.\n\nDefining and using a class\n<<>>=\nv <- 1:5\nv\nclass(v)\n\nclass(v) <- \"myclass\"\nv\n\nattributes(v)\n\n\nprint.myclass <- function(x) {cat(\"My class: \", unclass(x), \"\\n\")}\nv\n@\n\nS4 provides oo-support with formal class descriptions.\n\n\\section{Applications}\n\n\\subsection{Inspecting Data}\n\n\nThis famous (Fisher's or Anderson's) iris data set gives the\nmeasurements in centimeters of the variables sepal length and\nwidth and petal length and width, respectively, for 50 flowers\nfrom each of 3 species of iris.  The species are Iris setosa,\n     versicolor, and virginica.\n\n% \\begin{center}\n% \\includegraphics[width=5cm]{iris-flower.jpeg}\n% \\end{center}\n\n\n<<fig=TRUE>>=\n\ndata(iris)\nhead(iris)\n\nsummary(iris)\n\ndata <- iris[, -5]\nclass <- iris[,5]\n\nboxplot(data)\n@\n\nData can be scaled\n<<fig=TRUE>>=\ndata_s <- scale(data)\nboxplot(as.data.frame(data_s))\n@\n\n\nWe can look at the data as a trellis plot.\n<<fig=TRUE>>=\nplot(data, col=class)\n@\n\nWe can look at a parallel coordinates plot\n<<fig=TRUE>>=\nlibrary(\"MASS\")\nparcoord(data, col=class, pch=0)\n@\n\n\\subsection{Linear Regression}\n\nWe fit a linear model for sepal length based on petals on part of the data \n(train). \n\n<<>>=\ntrain.ind <- sample(1:nrow(iris), 100)\ntrain <- iris[train.ind,]\ntest <- iris[-train.ind,]\n\n@\n\nlm uses a formula interface (many model building functions in\nR support this kind of interface; see \\url{http://cran.r-project.org/doc/manuals/R-intro.html#Formulae-for-statistical-models}).\n\n<<fig=TRUE>>=\nmodel <- lm(Sepal.Length ~ Petal.Length + Petal.Width, data = train)\nmodel\n\nplot(model, which=1)\n@\n\nUse the linear model to predict sepal length in the test data.\n\n<<fig=TRUE>>=\nSepal.Length.predicted <- predict(model, test)\nplot(Sepal.Length.predicted, test$Sepal.Length)\nabline(0,1, col=\"red\")\n@\n\n\\subsection{Cluster Analysis}\n\n\nClustering with $k$-means.\n<<>>=\ncl <- kmeans(data, centers=3)\ncl\n\ntable(class, cl$cluster)\n@\n\nUse PCA for display\n\n<<fig=TRUE>>=\npc <- prcomp(data)\npc\nsummary(pc)\n\nplot(pc$x, col=class, pch=cl$cluster)\n@\n\n\\subsection{Hierarchical Clustering}\n\n<<fig=TRUE>>=\nd <- dist(data)\nstr(d)\n\nhc <- hclust(d)\nhc\n\nplot(hc)\n@\n\n<<>>=\nd <- dist(data)\nlabels <- cutree(hc,3)\n\ntable(class,labels)\n@\n\n\\subsection{Classification}\n\nHere we use the package ``caret'' so we have to install it by typing\n\\verb|install.packages(\"caret\", depend = TRUE)|.\n\nWe use 90\\% as the training set and 10\\% as the test set.\n<<>>=\ntrain_index <- sample(1:nrow(data), .9*nrow(data), replace = FALSE)\ntrain_data <- data[train_index,]\ntrain_class <- class[train_index]\ntest_data <- data[-train_index,]\ntest_class <- class[-train_index]\n\n\nlibrary(\"caret\")\nknn <- knn3(as.matrix(train_data), train_class, k = 5)\nknn\nclass(knn)\n@\n\nNow we can use the model to make predictions for our test set (most model\ntypes in R have a predict method).\n\n<<>>=\npred <- predict(knn, test_data, type=\"class\")\n\nconf_tab <- table(test_class, pred)\nconf_tab\n\nsum(diag(conf_tab))/sum(conf_tab)\n@\n\nSince knn is of class knn3 use\n\\verb|? predict.knn3| to get help for predict for class knn3.\n\nCaret supports also a formula interface \nLet's use caret to search for parameters and do 10-fold cross validation.\n\n<<>>=\nknn_opt <- train(Species~., data=iris, method=\"knn\", \n    trControl= trainControl(method=\"cv\"),\n    tuneLength=5)\nknn_opt\n@\n\nOnly use Petal.Length and Sepal.Length for classification\n<<>>=\nknn_opt <- train(Species~Petal.Length+Sepal.Length, data=iris, method=\"knn\", \n    trControl= trainControl(method=\"cv\"),\n    tuneLength=5)\nknn_opt\n@\n\nFor more models try \\verb|? train|\n\n\n\n\\section{Contact Information}\n\nFor questions contact me in my office or per email \nat \\url{jtalcala@unizar.es}\n\n\n%\n%\\bibliographystyle{abbrvnat}\n%\\bibliography{seriation}\n%\n\\end{document}\n",
    "created" : 1423224161469.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1793016739",
    "id" : "235060AE",
    "lastKnownWriteTime" : 1423223684,
    "path" : "~/Master/mineria/p1/irisSweave.Rnw",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "sweave"
}